language: cpp
dist: trusty
sudo: required
os: linux

compiler:
  - gcc
  - clang

before_install:
  - sudo apt-get -qq update

  #-- Configure Git (needed by YCM)
  - if [ ! `git config --get user.email` ]; then `git config --global user.email 'user@example.com'`; fi
  - if [ ! `git config --get user.name` ]; then `git config --global user.name 'Travis CI'`; fi

  #-- Set YARP branch on cron jobs
  - '[[ "$TRAVIS_EVENT_TYPE" = cron ]] && export ROBOTOLOGY_CHECKOUT=devel || export ROBOTOLOGY_CHECKOUT=master'

  #-- Register SSH deploy key for AMOR API private repository
  #-- https://gist.github.com/lukewpatterson/4242707#gistcomment-2382443
  #-- http://anil.recoil.org/2013/10/06/travis-secure-ssh-integration.html
  - mkdir -p ~/.ssh
  - echo $DEPLOY_KEY_AMOR_API | base64 --decode | openssl aes-256-cbc -K $encrypted_9c9995b5c6b2_key -iv $encrypted_9c9995b5c6b2_iv -out ~/.ssh/id_rsa -d
  - chmod 600 ~/.ssh/id_rsa
  - echo "Host *" >> ~/.ssh/config
  - echo "    StrictHostKeyChecking no" >> ~/.ssh/config
  - echo "    CheckHostIP no" >> ~/.ssh/config
  - echo "    PasswordAuthentication no" >> ~/.ssh/config
  - echo "    UserKnownHostsFile=/dev/null" >> ~/.ssh/config

install:
  #-- Install Boost.Thread (AMOR API), Eigen3 (AMOR API and YARP) and GTest
  - sudo apt-get install libboost-thread-dev libeigen3-dev libgtest-dev

  #-- Install YCM
  - git clone --branch="$ROBOTOLOGY_CHECKOUT" https://github.com/robotology/ycm
  - cd ycm && mkdir build && cd build
  - cmake ..
  - make -j$(nproc)
  - sudo make install
  - cd ../..

  #-- Install YARP
  - git clone --branch="$ROBOTOLOGY_CHECKOUT" https://github.com/robotology/yarp
  - cd yarp && mkdir build && cd build
  - cmake .. -DSKIP_ACE=ON -DCREATE_LIB_MATH=ON
  - make -j$(nproc)
  - sudo make install
  - cd ../..

  #-- Install KDL
  - git clone https://github.com/orocos/orocos_kinematics_dynamics
  - cd orocos_kinematics_dynamics/orocos_kdl && mkdir build && cd build
  - cmake ..
  - make -j$(nproc)
  - sudo make install
  - cd ../../..

  # Install color-debug
  - cd
  - git clone https://github.com/roboticslab-uc3m/color-debug
  - mkdir -p color-debug/build && cd "$_"
  - cmake ..
  - sudo make install

  #-- (for AmorCartesianControl) Install AMOR API
  - git clone git@github.com:roboticslab-uc3m/amor-api
  - cd amor-api && mkdir build && cd build
  - cmake ..
  - make -j$(nproc)
  - sudo make install
  - cd ../..

  #-- (for testBasicCartesianControl and apps using proximity sensors) Install yarp-devices
  - git clone https://github.com/roboticslab-uc3m/yarp-devices
  - cd yarp-devices
  - mkdir build && cd build
  - cmake ..
  - make -j$(nproc)
  - sudo make install
  - cd ../..

  # see http://gronlier.fr/blog/2015/01/adding-code-coverage-to-your-c-project/
  - if [ "$CXX" = "g++" ]; then wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then tar xf lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then sudo make -C lcov-1.11/ install; fi
  - if [ "$CXX" = "g++" ]; then gem install coveralls-lcov; fi

before_script:
  - mkdir -p build && cd build
  - cmake .. -DENABLE_coverage=ON
  - make
  - sudo make install
  - sudo ldconfig

script:
  - bin/testKinRepresentation
  - bin/testKdlSolver
  - bin/testKdlSolverFromFile
  - bin/testAsibotSolverFromFile
  - bin/testKdlTrajectory
  - bin/testBasicCartesianControl

after_success:
  #  - cd ${TRAVIS_BUILD_DIR}
  # capture coverage info
  - if [ "$CXX" = "g++" ]; then lcov --directory . --capture --output-file coverage.info; fi
  # filter out system and test code
  - if [ "$CXX" = "g++" ]; then lcov --remove coverage.info  '/usr/*' 'tests/*' --output-file coverage.info; fi
  # debug before upload
  - if [ "$CXX" = "g++" ]; then lcov --list coverage.info; fi
  # uploads to coveralls
  #- if [ "$CXX" = "g++" ]; then coveralls-lcov --source-encoding=ISO-8859-1 --repo-token InWqFy6VWMrEUzr2Rn8XV0cGqv3wXWo2d coverage.info; fi
  - if [ "$CXX" = "g++" ]; then coveralls-lcov --source-encoding=ISO-8859-1 coverage.info; fi

  - sudo make uninstall

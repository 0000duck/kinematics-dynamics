language: cpp
dist: trusty
sudo: required
os: linux

compiler:
  - gcc
  - clang

env:
  global:
    - YARP_VER=2.3.72
    - KDL_VER=9330240 # 1.4.0
    - CACHE_DIR=~/cached-deps

cache:
  directories: $CACHE_DIR

before_install:
  - sudo apt-get -qq update

  #-- Configure Git (needed by YCM)
  - if [ ! `git config --get user.email` ]; then `git config --global user.email 'user@example.com'`; fi
  - if [ ! `git config --get user.name` ]; then `git config --global user.name 'Travis CI'`; fi

  #-- Register SSH deploy key for AMOR API private repository
  - source "$TRAVIS_BUILD_DIR/scripts/travis/configure-ssh.sh"

install:
  #-- Install Boost.Thread (AMOR API), Eigen3 (AMOR API and YARP) and GTest
  - sudo apt-get install libboost-thread-dev libeigen3-dev libgtest-dev

  #-- Install YARP
  - source "$TRAVIS_BUILD_DIR/scripts/travis/cache-yarp.sh"

  #-- Install KDL
  - source "$TRAVIS_BUILD_DIR/scripts/travis/cache-kdl.sh"

  #-- (for AmorCartesianControl) Install AMOR API
  - git clone git@github.com:roboticslab-uc3m/amor-api ~/amor-api
  - mkdir -p ~/amor-api/build
  - cmake -H~/amor-api -B~/amor-api/build
  - make -C ~/amor-api/build -j$(nproc)
  - export AMOR_API_DIR=~/amor-api/build
  - export LD_LIBRARY_PATH=~/amor-api/build/lib:$LD_LIBRARY_PATH

  #-- (for testBasicCartesianControl and apps using proximity sensors) Install yarp-devices
  - git clone https://github.com/roboticslab-uc3m/yarp-devices ~/yarp-devices
  - mkdir -p ~/yarp-devices/build
  - cmake -H~/yarp-devices -B~/yarp-devices/build
  - make -C ~/yarp-devices/build -j$(nproc)
  - export ROBOTICSLAB_YARP_DEVICES_DIR=~/yarp-devices/build
  - export LD_LIBRARY_PATH=~/yarp-devices/build/lib:~/yarp-devices/build/lib/yarp:$LD_LIBRARY_PATH
  - export YARP_DATA_DIRS=~/yarp-devices/build/share/roboticslab-yarp-devices:$YARP_DATA_DIRS

  # see http://gronlier.fr/blog/2015/01/adding-code-coverage-to-your-c-project/
  - if [ "$CXX" = "g++" ]; then wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then tar xf lcov_1.11.orig.tar.gz; fi
  - if [ "$CXX" = "g++" ]; then sudo make -C lcov-1.11/ install; fi
  - if [ "$CXX" = "g++" ]; then gem install coveralls-lcov; fi

before_script:
  - mkdir -p "$TRAVIS_BUILD_DIR/build" && cd "$_"
  - cmake .. -DCMAKE_INSTALL_PREFIX="$PWD/install" -DENABLE_coverage:BOOL=ON
  - make install
  - export LD_LIBRARY_PATH=$PWD/install/lib:$PWD/install/lib/yarp:$LD_LIBRARY_PATH
  - export YARP_DATA_DIRS=$PWD/install/share/roboticslab-kinematics-dynamics:$YARP_DATA_DIRS

script:
  - bin/testKinRepresentation
  - bin/testKdlSolver
  - bin/testKdlSolverFromFile
  - bin/testAsibotSolverFromFile
  - bin/testKdlTrajectory
  - bin/testBasicCartesianControl

after_success:
  #  - cd ${TRAVIS_BUILD_DIR}
  # capture coverage info
  - if [ "$CXX" = "g++" ]; then lcov --directory . --capture --output-file coverage.info; fi
  # filter out system and test code
  - if [ "$CXX" = "g++" ]; then lcov --remove coverage.info  '/usr/*' 'tests/*' --output-file coverage.info; fi
  # debug before upload
  - if [ "$CXX" = "g++" ]; then lcov --list coverage.info; fi
  # uploads to coveralls
  #- if [ "$CXX" = "g++" ]; then coveralls-lcov --source-encoding=ISO-8859-1 --repo-token InWqFy6VWMrEUzr2Rn8XV0cGqv3wXWo2d coverage.info; fi
  - if [ "$CXX" = "g++" ]; then coveralls-lcov --source-encoding=ISO-8859-1 coverage.info; fi

  - make uninstall
